version: '3.1'

services:
  medshakeehr:
    container_name: msehr
    image: marsante/msehrtest:8.1.1
    # user: ${USER_ID}:${GROUP_ID}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      VIRTUAL_HOST: ${VIRTUAL_HOST}
      SELF_SIGNED_HOST: ${VIRTUAL_HOST}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      # PROTO: ${PROTO}
      # COOKIED: ${COOKIED}
      # FINGERPRINT: ${FINGERPRINT}
      # SQLVARPSWD: ${SQLVARPSWD}
    depends_on:
      - db
      - proxy-companion
    volumes: 
      - medshakeehr:/var/www/html
      # if you use bind volume with arbitrary user create first the folder with the good permissions
      # - ./medshakeehr:/var/www/html
    networks:
      - proxy
      - db
      # - orthanc
  
  # https://hub.docker.com/_/mariadb
  db:
    container_name: msehrdb
    image: mariadb:10.11
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MARIADB_AUTO_UPGRADE: ${MARIADB_AUTO_UPGRADE}
    volumes: 
      - db-data:/var/lib/mysql
      # If you would import old database
      # - ./db-data:/docker-entrypoint-initdb.d
    networks:
      - db

  # # https://hub.docker.com/_/phpmyadmin  
  # phpmyadmin:
  #     container_name: phpmyadmin
  #     image: phpmyadmin
  #     restart: unless-stopped
  #     environment:
  #       VIRTUAL_HOST: "pma.${VIRTUAL_HOST}"
  #       SELF_SIGNED_HOST: "pma.${VIRTUAL_HOST}"
  #       PMA_HOST: db
  #     networks:
  #       - proxy
  #       - db

  # # https://hub.docker.com/r/osimis/orthanc
  # orthanc:
  #   container_name: msehrdicom
  #   image: osimis/orthanc
  #   restart: unless-stopped
  #   command: /run/secrets/  # Path to the configuration files (stored as secrets)
  #   secrets:
  #     - orthanc.json
  #   networks:
  #     - orthanc

  # https://hub.docker.com/r/jwilder/nginx-proxy
  nginx-proxy:
    container_name: proxy
    image: nginxproxy/nginx-proxy:alpine
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/nginx/certs
      - /var/run/docker.sock:/tmp/docker.sock:ro
      # rootless socket for user 1000
      # - /run/user/1000/docker.sock:/tmp/docker.sock:ro
    networks:
      - proxy
      
  # https://hub.docker.com/r/sebastienheyd/self-signed-proxy-companion
  proxy-companion:
    container_name: proxy-companion
    image: sebastienheyd/self-signed-proxy-companion
    restart: unless-stopped
    depends_on:
      - nginx-proxy
    volumes:
      - certs:/etc/nginx/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # rootless socket for user 1000
      # - /run/user/1000/docker.sock:/var/run/docker.sock:ro

  # https://hub.docker.com/r/containrrr/watchtower
  watchtower:
    image: containrrr/watchtower 
    container_name: watchtower
    restart: unless-stopped
    environment:
      TZ: $TZ 
      WATCHTOWER_SCHEDULE: ${WATCHTOWER_SCHEDULE}
      WATCHTOWER_ROLLING_RESTART: ${WATCHTOWER_ROLLING_RESTART}
      WATCHTOWER_CLEANUP: ${WATCHTOWER_CLEANUP}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # - /run/user/1000/docker.sock:/var/run/docker.sock:ro

  # # https://hub.docker.com/r/linuxserver/wireguard
  # wireguard:
  #   image: lscr.io/linuxserver/wireguard:latest
  #   container_name: wireguard
  #   cap_add:
  #     - NET_ADMIN
  #     - SYS_MODULE
  #   environment:
  #     PUID: ${USER_ID}
  #     PGID: ${GROUP_ID}
  #     TZ: ${TZ}
  #     SERVERURL: #optional, public domain or IP
  #     SERVERPORT: 51820 #optional
  #     PEERS: 1 #optional
  #     PEERDNS: auto #optional
  #     INTERNAL_SUBNET: ${INTERNAL_SUBNET}  #optional
  #     ALLOWEDIPS: 0.0.0.0/0 #optional
  #     PERSISTENTKEEPALIVE_PEERS: #optional
  #     LOG_CONFS: true #optional
  #   volumes:
  #     - /path/to/appdata/config:/config
  #     - /lib/modules:/lib/modules #optional
  #   ports:
  #     - 51820:51820/udp
  #   sysctls:
  #     - net.ipv4.conf.all.src_valid_mark=1
  #   restart: unless-stopped

# secrets:
#   orthanc.json:
#     file: orthanc.json

volumes:
  db-data:
  certs:
  medshakeehr:

networks:
  proxy:
    name: proxy
  db:
  # orthanc:
